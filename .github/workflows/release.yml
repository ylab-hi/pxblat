name: Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    name: Check Version
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.10"

      - name: Upgrade pip
        run: |
          pip install --constraint=.github/workflows/constraints.txt pip
          pip --version

      - name: Install Poetry
        run: |
          pip install --constraint=.github/workflows/constraints.txt poetry
          poetry --version

      - name: Build sdist
        run: |
          poetry build --format=sdist

      - uses: actions/upload-artifact@v5
        with:
          name: dist
          path: dist/*.tar.gz

      - name: Check if there is a parent commit
        id: check-parent-commit
        run: |
          echo "sha=$(git rev-parse --verify --quiet HEAD^)" >> $GITHUB_OUTPUT

      - name: Detect and tag new version
        id: check-version
        if: steps.check-parent-commit.outputs.sha
        uses: salsify/action-detect-and-tag-new-version@v2.0.3
        with:
          version-command: |
            bash -o pipefail -c "poetry version | awk '{ print \$2 }'"

      - name: Bump version for developmental release
        if: "! steps.check-version.outputs.tag"
        run: |
          poetry version patch &&
          version=$(poetry version | awk '{ print $2 }') &&
          poetry version $version.dev.$(date +%s)

    outputs:
      tag: ${{steps.check-version.outputs.tag}}

  build_wheels_linux:
    name: "${{ matrix.os }} ${{ matrix.cibw_archs }} ${{ matrix.cibw_build }}"
    runs-on: ${{ matrix.os }}
    needs: ["release"]
    if: needs.release.outputs.tag

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            cibw_build: "cp39-*"
            cibw_archs: "x86_64"
            artifact_name: "cp39"
          - os: ubuntu-latest
            cibw_build: "cp310-*"
            cibw_archs: "x86_64"
            artifact_name: "cp310"
          - os: ubuntu-latest
            cibw_build: "cp311-*"
            cibw_archs: "x86_64"
            artifact_name: "cp311"

    steps:
      - name: Check out repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up QEMU
        if: matrix.cibw_archs != 'x86_64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up python 3.10
        uses: actions/setup-python@v6
        with:
          python-version: "3.10"

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: false
          virtualenvs-in-project: false

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.2.1
        env:
          CIBW_BUILD_FRONTEND: pip
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_ARCHS: ${{ matrix.cibw_archs }}
          CIBW_BUILD: ${{ matrix.cibw_build }}
          CIBW_SKIP: "*musllinux*"

      - uses: actions/upload-artifact@v5
        with:
          name: wheels-linux-${{ matrix.artifact_name }}-${{ matrix.cibw_archs }}
          path: wheelhouse/*.whl

  build_wheels_macos:
    name: "${{ matrix.os }} ${{ matrix.cibw_archs }} ${{ matrix.cibw_build }}"
    runs-on: ${{ matrix.os }}
    needs: ["release"]
    if: needs.release.outputs.tag

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-13
            cibw_build: "cp39-*"
            cibw_archs: "x86_64"
            artifact_name: "cp39"
          - os: macos-13
            cibw_build: "cp310-*"
            cibw_archs: "x86_64"
            artifact_name: "cp310"
          - os: macos-13
            cibw_build: "cp311-*"
            cibw_archs: "x86_64"
            artifact_name: "cp311"
    env:
      SYSTEM_VERSION_COMPAT: 0 # https://github.com/actions/setup-python/issues/469#issuecomment-1192522949
    steps:
      - name: Check out repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up python 3.10
        uses: actions/setup-python@v6
        with:
          python-version: "3.10"

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: false
          virtualenvs-in-project: false

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.2.1
        env:
          CIBW_BUILD_FRONTEND: pip
          CIBW_BUILD: ${{ matrix.cibw_build }}
          CIBW_ARCHS: ${{ matrix.cibw_archs }}
          CIBW_TEST_SKIP: "*-macosx_arm64"
          MACOSX_DEPLOYMENT_TARGET: "13.0"

      - uses: actions/upload-artifact@v5
        with:
          name: wheels-macos-${{ matrix.artifact_name }}-${{ matrix.cibw_archs }}
          path: wheelhouse/*.whl

  build_wheels_macos_arm64:
    name: "${{ matrix.os }} ${{ matrix.cibw_archs }} ${{ matrix.cibw_build }}"
    runs-on: ${{ matrix.os }}
    needs: ["release"]
    if: needs.release.outputs.tag

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-14
            cibw_build: "cp39-*"
            cibw_archs: "arm64"
            artifact_name: "cp39"
          - os: macos-14
            cibw_build: "cp310-*"
            cibw_archs: "arm64"
            artifact_name: "cp310"
          - os: macos-14
            cibw_build: "cp311-*"
            cibw_archs: "arm64"
            artifact_name: "cp311"
    env:
      SYSTEM_VERSION_COMPAT: 0 # https://github.com/actions/setup-python/issues/469#issuecomment-1192522949
    steps:
      - name: Check out repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up python 3.10
        uses: actions/setup-python@v6
        with:
          python-version: "3.10"

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: false
          virtualenvs-in-project: false

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.2.1
        env:
          CIBW_BUILD_FRONTEND: pip
          CIBW_BUILD: ${{ matrix.cibw_build }}
          CIBW_ARCHS: ${{ matrix.cibw_archs }}
          MACOSX_DEPLOYMENT_TARGET: "13.0"

      - uses: actions/upload-artifact@v5
        with:
          name: wheels-macos-arm64-${{ matrix.artifact_name }}
          path: wheelhouse/*.whl

  upload_to_pypi:
    needs:
      [
        "release",
        "build_wheels_macos",
        "build_wheels_linux",
        "build_wheels_macos_arm64",
      ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v6
        with:
          pattern: dist
          path: dist
      - uses: actions/download-artifact@v6
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - name: Publish package on PyPI
        if: needs.release.outputs.tag
        uses: pypa/gh-action-pypi-publish@v1.13.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          skip-existing: true
          packages-dir: dist/

      - name: Publish the release notes
        uses: release-drafter/release-drafter@v6.1.0
        with:
          publish: ${{ needs.release.outputs.tag != '' }}
          tag: ${{ needs.release.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  upload_to_test_pypi:
    needs: ["release"]
    runs-on: ubuntu-latest
    if: "! needs.release.outputs.tag"
    steps:
      - uses: actions/download-artifact@v6
        with:
          pattern: dist
          path: dist
      - uses: actions/download-artifact@v6
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - name: Publish package on TestPyPI
        uses: pypa/gh-action-pypi-publish@v1.13.0
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
          packages-dir: dist/

      - name: Publish the release notes
        uses: release-drafter/release-drafter@v6.1.0
        with:
          publish: ${{ needs.release.outputs.tag != '' }}
          tag: ${{ needs.release.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
