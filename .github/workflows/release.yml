name: Release

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    name: Check Version
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.10"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Build sdist
        run: |
          uv build --sdist

      - uses: actions/upload-artifact@v5
        with:
          path: dist/*.tar.gz

      - name: Check if there is a parent commit
        id: check-parent-commit
        run: |
          echo "sha=$(git rev-parse --verify --quiet HEAD^)" >> $GITHUB_OUTPUT

      - name: Detect and tag new version
        id: check-version
        if: steps.check-parent-commit.outputs.sha
        uses: salsify/action-detect-and-tag-new-version@v2.0.3
        with:
          version-command: |
            bash -o pipefail -c "uv run python -c 'import tomllib; print(tomllib.load(open(\"pyproject.toml\", \"rb\"))[\"project\"][\"version\"])'"

      - name: Bump version for developmental release
        if: "! steps.check-version.outputs.tag"
        run: |
          # Install tomli-w for writing TOML
          pip install tomli-w
          # Bump version for dev release using a Python script
          python -c "
          import tomllib, tomli_w
          from datetime import datetime
          with open('pyproject.toml', 'rb') as f:
              config = tomllib.load(f)
          version = config['project']['version']
          parts = version.split('.')
          parts[-1] = str(int(parts[-1]) + 1)
          dev_version = '.'.join(parts) + f'.dev{int(datetime.now().timestamp())}'
          config['project']['version'] = dev_version
          with open('pyproject.toml', 'wb') as f:
              tomli_w.dump(config, f)
          print(f'Version bumped to {dev_version}')
          "

    outputs:
      tag: ${{steps.check-version.outputs.tag}}

  build_wheels_linux:
    name: "${{ matrix.os }} ${{ matrix.cibw_archs }} ${{ matrix.cibw_build }}"
    runs-on: ${{ matrix.os }}
    needs: ["release"]
    if: needs.release.outputs.tag

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        cibw_build: ["cp39-*", "cp310-*", "cp311-*"]
        cibw_archs: ["x86_64"]

    steps:
      - name: Check out repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up QEMU
        if: matrix.cibw_archs != 'x86_64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up python 3.10
        uses: actions/setup-python@v6
        with:
          python-version: "3.10"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.2.1
        env:
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_ARCHS: ${{ matrix.cibw_archs }}
          CIBW_BUILD: ${{ matrix.cibw_build }}
          CIBW_SKIP: "*musllinux*"

      - uses: actions/upload-artifact@v5
        with:
          path: wheelhouse/*.whl

  build_wheels_macos:
    name: "${{ matrix.os }} ${{ matrix.cibw_archs }} ${{ matrix.cibw_build }}"
    runs-on: ${{ matrix.os }}
    needs: ["release"]
    if: needs.release.outputs.tag

    strategy:
      fail-fast: false
      matrix:
        os: [macos-13]
        cibw_build: ["cp39-*", "cp310-*", "cp311-*"]
        cibw_archs: ["x86_64"]
    env:
      SYSTEM_VERSION_COMPAT: 0 # https://github.com/actions/setup-python/issues/469#issuecomment-1192522949
    steps:
      - name: Check out repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up python 3.10
        uses: actions/setup-python@v6
        with:
          python-version: "3.10"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.2.1
        env:
          CIBW_BUILD: ${{ matrix.cibw_build }}
          CIBW_ARCHS: ${{ matrix.cibw_archs }}
          CIBW_TEST_SKIP: "*-macosx_arm64"

      - uses: actions/upload-artifact@v5
        with:
          path: wheelhouse/*.whl

  build_wheels_macos_arm64:
    name: "${{ matrix.os }} ${{ matrix.cibw_archs }} ${{ matrix.cibw_build }}"
    runs-on: ${{ matrix.os }}
    needs: ["release"]
    if: needs.release.outputs.tag

    strategy:
      fail-fast: false
      matrix:
        os: [macos-14]
        cibw_build: ["cp39-*", "cp310-*", "cp311-*"]
        cibw_archs: ["arm64"]
    env:
      SYSTEM_VERSION_COMPAT: 0 # https://github.com/actions/setup-python/issues/469#issuecomment-1192522949
    steps:
      - name: Check out repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up python 3.10
        uses: actions/setup-python@v6
        with:
          python-version: "3.10"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.2.1
        env:
          CIBW_BUILD: ${{ matrix.cibw_build }}
          CIBW_ARCHS: ${{ matrix.cibw_archs }}

      - uses: actions/upload-artifact@v5
        with:
          path: wheelhouse/*.whl

  upload_to_pypi:
    needs:
      [
        "release",
        "build_wheels_macos",
        "build_wheels_linux",
        "build_wheels_macos_arm64",
      ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v6

      - name: Publish package on PyPI
        if: needs.release.outputs.tag
        uses: pypa/gh-action-pypi-publish@v1.13.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          skip_existing: true
          packages_dir: artifact/

      - name: Publish the release notes
        uses: release-drafter/release-drafter@v6.1.0
        with:
          publish: ${{ needs.release.outputs.tag != '' }}
          tag: ${{ needs.release.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  upload_to_test_pypi:
    needs: ["release"]
    runs-on: ubuntu-latest
    if: "! needs.release.outputs.tag"
    steps:
      - uses: actions/download-artifact@v6

      - name: Publish package on TestPyPI
        uses: pypa/gh-action-pypi-publish@v1.13.0
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
          skip_existing: true
          packages_dir: artifact/

      - name: Publish the release notes
        uses: release-drafter/release-drafter@v6.1.0
        with:
          publish: ${{ needs.release.outputs.tag != '' }}
          tag: ${{ needs.release.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
