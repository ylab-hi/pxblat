# Project metadata using PEP 621
[project]
name = "pxblat"
version = "1.2.1"
description = "A native python binding for blat suite"
authors = [{ name = "Yangyang Li", email = "yangyang.li@northwestern.edu" }]
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.9,<3.12"
keywords = ["bioinformatics", "sequence aligner", "blat"]
classifiers = [
  "Development Status :: 6 - Mature",
  "Operating System :: POSIX :: Linux",
  "Operating System :: MacOS :: MacOS X",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: C",
  "Programming Language :: C++",
]

# Core dependencies
dependencies = [
  "loguru>=0.7.0",
  "pybind11>=2.10.4",
  "setuptools>=68.2.2,<76.0.0",
  "rich>=13.3.5",
  "pysimdjson>=5.0.2,<7.0.0",
  "biopython>=1.81",
  "deprecated>=1.2.13",
  "mashumaro>=3.8.1,<3.9.0",
  "typing-extensions>=4.0.0",
  "urllib3==2.3.0",
  "typer>=0.9,<0.16",
]


# Dependency groups (modern uv format)
[dependency-groups]
dev = [
  "pytest>=7.3.1,<9.0.0",
  "pytest-sugar>=0.9.7,<1.1.0",
  "pybind11-stubgen>=0.13,<2.6",
  "invoke>=2.1.2",
  "ipdb>=0.13.13",
  "pytest-ordering>=0.6",
  "pytest-xdist>=3.3.1",
  "scienceplots>=2.0.1",
  "tikzplotlib>=0.10.1",
  "nox>=2023.4.22,<2025.0.0",
  "codecov>=2.1.13",
  "myst-parser>=1,<4",
  "sphinx-immaterial[clang-format,cpp,json,keys]>=0.11.11",
  "linkify-it-py>=2.0.2",
  "sphinx-copybutton>=0.5.2",
  "sphinx-togglebutton>=0.3.2",
  "sphinxcontrib-bibtex>=2.5.0",
  "sphinx-autoapi>=2.1,<4.0",
  "sphinx-autodoc2>=0.4.2,<0.6.0",
  "psutil>=5.9.5,<7.0.0",
  "seaborn>=0.12.2,<0.14.0",
  "mypy>=1.4.1",
  "sphinx-click>=4.4,<7.0",
  "py-spy>=0.3.14,<0.5.0",
  "sphinx-autobuild>=2021.3.14,<2025.0.0",
  "cibuildwheel>=2.16.2",
  "ruff>=0.5.0,<0.9.0",
  "delocate>=0.10.4,<0.13.0",
]

# Entry points / CLI scripts
[project.scripts]
pxblat = "pxblat.cli.cli:app"

# URLs
[project.urls]
Homepage = "https://github.com/ylab-hi/pxblat"
Documentation = "https://pxblat.readthedocs.io/en/latest/"
Repository = "https://github.com/ylab-hi/pxblat"

# Build system using setuptools with custom build
[build-system]
requires = [
    "setuptools>=68.2.2",
    "wheel",
    "pybind11>=2.10.4",
]
build-backend = "setuptools.build_meta"

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 120
fix = true
exclude = [
  "src/pxblat/extc/__init__.pyi",
  "src/pxblat/__init__.py",
  "tasks.py",
  "tests/*",
  "build.py",
  "scripts/*",
  "noxfile.py",
  "docs/conf.py",
  "setup.py",
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  "figures",
]

[tool.ruff.lint]
select = [
  "A",     # flake8-builtins
  "ANN",   # flake8-annotations
  "ARG",   # flake8-unused-arguments
  "B",     # flake8-bugbear
  "B9",    # flake8-bugbear opinionated
  "BLE",   # flake8-blind-except
  "C4",    # flake8-comprehensions
  "C90",   # mccabe
  "COM",   # flake8-commas
  "D",     # pydocstyle
  "DTZ",   # flake8-datetimez
  "E",     # pycodestyle errors
  "EM",    # flake8-errmsg
  "ERA",   # eradicate
  "EXE",   # flake8-executable
  "F",     # pyflakes
  "FA",    # flake8-future-annotations
  "FBT",   # flake8-boolean-trap
  "FIX",   # flake8-fixme
  "I",     # isort
  "ICN",   # flake8-import-conventions
  "ISC",   # flake8-implicit-str-concat
  "N",     # pep8-naming
  "PD",    # pandas-vet
  "PGH",   # pygrep-hooks
  "PIE",   # flake8-pie
  "PL",    # pylint
  "PLC",   # pylint convention
  "PLE",   # pylint error
  "PLR",   # pylint refactor
  "PLW",   # pylint warning
  "PT",    # flake8-pytest-style
  "PTH",   # flake8-use-pathlib
  "PYI",   # flake8-pyi
  "Q",     # flake8-quotes
  "RET",   # flake8-return
  "RUF",   # ruff-specific rules
  "S",     # flake8-bandit
  "SIM",   # flake8-simplify
  "SLOT",  # flake8-slots
  "T10",   # flake8-debugger
  "T20",   # flake8-print
  "TCH",   # flake8-type-checking
  "TD",    # flake8-todos
  "TID",   # flake8-tidy-imports
  "UP",    # pyupgrade
  "W",     # pycodestyle warnings
  "YTT",   # flake8-2020
  # "CPY",  # flake8-copyright (commented out)
]
ignore = [
  "ANN001",  # Missing type annotation for function argument
  "ANN002",  # Missing type annotation for *args
  "ANN003",  # Missing type annotation for **kwargs
  "ANN201",  # Missing return type annotation for public function
  "ANN202",  # Missing return type annotation for private function
  "ANN204",  # Missing return type annotation for special method
  "ANN205",  # Missing return type annotation for staticmethod
  "ANN206",  # Missing return type annotation for classmethod
  "COM812",  # Trailing comma missing (conflicts with formatter)
  "COM819",  # Trailing comma prohibited (conflicts with formatter)
  "D100",    # Missing docstring in public module
  "D203",    # 1 blank line required before class docstring
  "D206",    # Docstring should be indented with spaces (conflicts with formatter)
  "D401",    # First line of docstring should be in imperative mood
  "E501",    # Line too long
  "EM101",   # Exception must not use a string literal
  "ISC001",  # Implicitly concatenated string literals (conflicts with formatter)
  "N802",    # Function name should be lowercase
  "N803",    # Argument name should be lowercase
  "N806",    # Variable in function should be lowercase
  "N815",    # Variable in class scope should not be mixedCase
  "PGH003",  # Use specific rule codes when ignoring type issues
  "Q000",    # Single quotes found but double quotes preferred (conflicts with formatter)
  "Q001",    # Single quote multiline found but double quotes preferred (conflicts with formatter)
  "Q002",    # Single quote docstring found but double quotes preferred (conflicts with formatter)
  "Q003",    # Avoidable escaped quote (conflicts with formatter)
  "W191",    # Indentation contains tabs (conflicts with formatter)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
skip-magic-trailing-comma = false
docstring-code-format = true

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["chr", "typer.Argument", "typer.Option"]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"src/pxblat/cli/twobit2fa.py" = ["B008", "PLR0913", "FBT001", "FBT003"]
"src/pxblat/extc/__init__.py" = ["F405", "F403", "D104", "D103", "TID252"]
"src/pxblat/server/basic.py" = ["PLR0913"]
"src/pxblat/server/server.py" = ["PLR0913", "D102"]
"src/pxblat/server/client.py" = ["PLR0913"]
"src/pxblat/cli/server.py" = ["PLR0913", "N816", "FBT001", "FBT003"]
"src/pxblat/cli/client.py" = ["B008", "PLR0913", "FBT001", "FBT003"]
"src/pxblat/cli/fa2twobit.py" = ["B008", "PLR0913", "FBT001", "FBT003", "FA100"]
"src/pxblat/cli/cli.py" = ["DTZ005"]
"src/pxblat/toolkit/__init__.py" = ["PLR0913"]
"src/pxblat/parser.py" = ["A001", "A002", "ARG001"]
"docs/tutorial_data/improved_blat_example.py" = ["T201", "D103"]
"docs/tutorial_data/query_context.py" = ["T201", "D103"]
"docs/tutorial_data/2bit.py" = ["T201", "D103"]
"docs/tutorial_data/query_general.py" = ["T201", "D103"]
"docs/tutorial_data/query_result.py" = ["T201", "D103"]
"docs/tutorial_data/blat.py" = ["T201", "D103"]

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["pxblat"]
omit = ["tests/*"]

[tool.coverage.report]
show_missing = true
fail_under = 40
ignore_errors = true

[tool.mypy]
strict = false
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
ignore_missing_imports = true

[tool.pytest.ini_options]
markers = [
  "smoke: a quick smoke test",
  "failing: failing tests",
  "imports: importing tests",
]

[tool.codespell]
skip = 'uv.lock,'

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version_type = "pep440"
version_provider = "pep621"
update_changelog_on_bump = true
major_version_zero = true

[tool.cibuildwheel]
build-frontend = "build"

[tool.cibuildwheel.linux]
before-all = "yum install -y openssl-devel"
test-requires = "pytest"
test-command = "pytest {project}/tests -vls -m imports"

[tool.cibuildwheel.macos]
test-requires = "pytest"
test-command = "pytest {project}/tests -vls -m imports"
